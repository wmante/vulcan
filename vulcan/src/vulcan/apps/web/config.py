"""
Configuration for the Vulcan web application.
"""
import os
from pathlib import Path
from typing import List

# Application information
APP_TITLE = "Vulcan"
APP_DESCRIPTION = "Autonomous Coding Agent"
APP_VERSION = "0.1.0"

# Paths
ROOT_DIR = Path(__file__).parent.parent.parent.parent.parent
CONFIG_DIR = ROOT_DIR / "config"

# Environment
ENV = os.environ.get("VULCAN_ENV", "development")

# API configuration
API_URL = os.environ.get("VULCAN_API_URL", "http://localhost:8000")
API_KEY = os.environ.get("VULCAN_API_KEY", "development-api-key")

# UI configuration
THEME_COLOR = "#4B5563"
ACCENT_COLOR = "#10B981"
ERROR_COLOR = "#EF4444"
WARNING_COLOR = "#F59E0B"
INFO_COLOR = "#3B82F6"

# Feature flags
ENABLE_DEPLOYMENT = os.environ.get("ENABLE_DEPLOYMENT", "true").lower() == "true"
ENABLE_TESTING = os.environ.get("ENABLE_TESTING", "true").lower() == "true"

# Code generation defaults
DEFAULT_CONSTRAINTS = [
    "Must include proper error handling",
    "Must include type hints",
    "Must include docstrings",
    "Must follow PEP 8 style guide",
]

# Testing defaults
DEFAULT_GENERATE_COVERAGE = True

# Deployment defaults
DEFAULT_BRANCH = "main"
DEFAULT_COMMIT_MESSAGE = "Code generated by Vulcan"

# Load environment-specific configuration
def load_env_config():
    """Load environment-specific configuration."""
    config_file = CONFIG_DIR / ENV / "app_config.py"
    if config_file.exists():
        # This is a simplified version; in a real app, you'd use importlib
        # to load the configuration module
        with open(config_file, "r") as f:
            exec(f.read(), globals())
    
    return {
        "APP_TITLE": APP_TITLE,
        "APP_DESCRIPTION": APP_DESCRIPTION,
        "APP_VERSION": APP_VERSION,
        "API_URL": API_URL,
        "API_KEY": API_KEY,
        "THEME_COLOR": THEME_COLOR,
        "ACCENT_COLOR": ACCENT_COLOR,
        "ERROR_COLOR": ERROR_COLOR,
        "WARNING_COLOR": WARNING_COLOR,
        "INFO_COLOR": INFO_COLOR,
        "ENABLE_DEPLOYMENT": ENABLE_DEPLOYMENT,
        "ENABLE_TESTING": ENABLE_TESTING,
        "DEFAULT_CONSTRAINTS": DEFAULT_CONSTRAINTS,
        "DEFAULT_GENERATE_COVERAGE": DEFAULT_GENERATE_COVERAGE,
        "DEFAULT_BRANCH": DEFAULT_BRANCH,
        "DEFAULT_COMMIT_MESSAGE": DEFAULT_COMMIT_MESSAGE,
    }